<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 currentState="normal"
		 width="64" height="64"
		 doubleClickEnabled="true"
		 mouseOver="myTileGroupItem_mouseOverHandler(event)"
		 mouseOut="myTileGroupItem_mouseOutHandler(event)">
	
	<s:states>
		<s:State name="normal" />
		<s:State name="over" />
		<s:State name="selected" />
	</s:states>
	
	<!-- Highlight component -->
	<s:Rect height="100%" width="100%" depth="2" includeIn="over, selected">
		<s:fill>
			<s:SolidColor color="0x99ccff" alpha.over=".3" alpha.selected=".6" />
		</s:fill>
	</s:Rect>
	
	<!-- Item -->
	<s:VGroup id="content" height="100%" width="100%" gap="5" depth="1"
			  paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"
			  verticalAlign="middle" horizontalAlign="center">
		
		<s:Image height="75%" width="75%" source="{source}" />
		<s:Label height="25%" width="75%" text="{label}" 
				 textAlign="center" maxDisplayedLines="-1" />
		
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			
			private var _source:String;
			private var _label:String;
			private var _provider:Object;
			
			/* Highlight the component or return it to normal */
			public function highlight(active:Boolean):void
			{
				if(active)
				{
					if(currentState == "normal")
					{
						currentState = "over";
					}
				}
				else
				{
					if(currentState == "over")
					{
						currentState = "normal";
					}
				}
			}
			
			/* Select the component or return it to normal */
			public function select(active:Boolean):void
			{
				if(active)
				{
					currentState = "selected";
				}
				else
				{
					currentState = "normal";
				}
			}
			
			
			/* Highlight the component if the mouse is over it */
			protected function myTileGroupItem_mouseOverHandler(event:MouseEvent):void
			{
				highlight(true);
			}
			
			/* Return in normal state if the mouse leave the component */
			protected function myTileGroupItem_mouseOutHandler(event:MouseEvent):void
			{
				highlight(false);
			}
			

			public override function set height(value:Number):void
			{
				if(value < 64)
				{
					return;
				}
				
				super.height = value;
			}
			
			public override function set width(value:Number):void
			{
				if(value < 64)
				{
					return;
				}
				
				super.width = value;
			}

			
			[Inspectable]
			public function set source(value:String):void
			{
				_source = value;
			}

			[Inspectable]
			public function set label(value:String):void
			{
				_label = value;
			}

			[Bindable]
			public function get source():String
			{
				return _source;
			}

			[Bindable]
			public function get label():String
			{
				return _label;
			}

			[Bindable]
			public function get provider():Object
			{
				return _provider;
			}

			public function set provider(value:Object):void
			{
				_provider = value;
			}
			
		]]>
	</fx:Script>
	
</s:Group>
