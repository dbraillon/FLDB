<?xml version="1.0" encoding="utf-8"?>
<s:TileGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
			 doubleClickEnabled="true"
			 mouseDown="myTileGroup_mouseDownHandler(event)"
			 mouseOver="myTileGroup_mouseOverHandler(event)">
	<!--rightMouseDown="myTileGroup_rightMouseDownHandler(event)"-->
	<fx:Metadata> 
		
		// Basic events
		[Event(name="groupSelectedChange", type="com.dbraillon.my.myExplorer.components.MyTileGroupEvent")]
		[Event(name="childDoubleClick", type="com.dbraillon.my.myExplorer.components.MyTileGroupEvent")]
		
		// Drag'n'drop
		[Event(name="childDragDrop", type="com.dbraillon.my.myExplorer.components.MyTileGroupEvent")]
		
		// Context menu
		[Event(name="groupRightMouseDown", type="com.dbraillon.my.myExplorer.components.MyTileGroupEvent")]
		[Event(name="childRightMouseDown", type="com.dbraillon.my.myExplorer.components.MyTileGroupEvent")]
		
	</fx:Metadata> 
	
	<fx:Script>
		<![CDATA[
			import mx.core.DragSource;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.components.Group;
			
			
			private var _dataProvider:Object;
			private var _selectedItem:Object;
			
			private var _labelField:String;
			private var _sourceField:String;
			private var _sourceFunction:Function;
			
			private var _childHeight:int;
			private var _childWidth:int;
			
			private function addEventListeners(element:IVisualElement):void
			{
				element.addEventListener(MouseEvent.MOUSE_DOWN, childDragStart);
				element.addEventListener(DragEvent.DRAG_ENTER, childDragEnter);
				element.addEventListener(DragEvent.DRAG_EXIT, childDragExit);
				element.addEventListener(DragEvent.DRAG_DROP, childDrop);
				element.addEventListener(MouseEvent.DOUBLE_CLICK, child_doubleClickHandler);
				element.addEventListener(MouseEvent.MOUSE_OVER, childMouseOver);
			}
			
			public override function addElement(element:IVisualElement):IVisualElement
			{
				addEventListeners(element);
				
				return super.addElement(element);
			}
			
			public override function addElementAt(element:IVisualElement, index:int):IVisualElement
			{
				addEventListeners(element);
				
				return super.addElementAt(element, index);
			}
			
			public override function set mxmlContent(array:Array):void
			{
				for each(var item:Object in array)
				{
					if(item is IVisualElement)
					{
						addEventListeners(item as IVisualElement);
					}
				}
				
				super.mxmlContent = array;
			}
			
			[Inspectable]
			public function set dataProvider(list:Object):void
			{
				_dataProvider = list;
				
				removeAllElements();
				selectedItem = null;
				
				for each(var item:Object in list)
				{
					var source:String;
					if(sourceFunction != null)
					{
						source = sourceFunction(item[sourceField] as String);
					}
					else
					{
						source = item[sourceField];
					}
					
					var myTileGroupItem:MyTileGroupItem = new MyTileGroupItem();
					myTileGroupItem.height = _childHeight;
					myTileGroupItem.width = _childWidth;
					myTileGroupItem.source = source;
					myTileGroupItem.label = item[labelField];
					myTileGroupItem.provider = item;
					
					addElement(myTileGroupItem);
				}
			}
			
			private function childSelect(event:MouseEvent):void
			{
				if(selectedItem && selectedItem is MyTileGroupItem)
				{
					selectedItem.deselect();
				}
				
				selectedItem = event.currentTarget;
				
				if(selectedItem && selectedItem is MyTileGroupItem)
				{
					selectedItem.select();
				}
				
				event.stopImmediatePropagation();
			}
			
			private function childDragStart(event:MouseEvent):void
			{
				childSelect(event);
				
				var element:UIComponent = UIComponent(event.currentTarget);
				
				var dragSource:DragSource = new DragSource();
				dragSource.addData(element, "dragedElement");
				
				DragManager.doDrag(element, dragSource, event, element);
			}
			
			protected function childDragEnter(event:DragEvent):void
			{
				if(event.dragInitiator != event.currentTarget)
				{
					event.currentTarget.setFocus();
					DragManager.acceptDragDrop(event.target as Group);
				}
			}
			
			protected function childDragExit(event:DragEvent):void
			{
				if(event.currentTarget is MyTileGroupItem)
				{
					event.currentTarget.looseFocus();
				}
			}
			
			protected function childDrop(event:DragEvent):void
			{
				if(event.dragInitiator != event.currentTarget)
				{
					var initiator:UIComponent = event.dragInitiator as UIComponent;
					var destination:UIComponent = event.currentTarget as UIComponent;
					var myTileGroupEvent:MyTileGroupEvent = new MyTileGroupEvent(MyTileGroupEvent.CHILD_DRAG_DROP, initiator, destination);
					
					dispatchEvent(myTileGroupEvent);
				}
			}
			
			[Bindable]
			public function get dataProvider():Object
			{
				return _dataProvider;
			}

			[Inspectable]
			public function set childHeight(value:int):void
			{
				_childHeight = value;
			}

			[Inspectable]
			public function set childWidth(value:int):void
			{
				_childWidth = value;
			}

			[Bindable]
			public function get selectedItem():Object
			{
				return _selectedItem;
			}

			public function set selectedItem(value:Object):void
			{
				_selectedItem = value;
				dispatchEvent(new Event(Event.CHANGE));
			}

			public function get labelField():String
			{
				return _labelField;
			}

			[Inspectable]
			public function set labelField(value:String):void
			{
				_labelField = value;
			}

			public function get sourceField():String
			{
				return _sourceField;
			}

			[Inspectable]
			public function set sourceField(value:String):void
			{
				_sourceField = value;
			}

			public function get sourceFunction():Function
			{
				return _sourceFunction;
			}

			/**
			 * Function must take a String in argument and return another String.
			 */
			[Inspectable]
			public function set sourceFunction(value:Function):void
			{
				_sourceFunction = value;
			}
			
			protected function myTileGroup_mouseDownHandler(event:MouseEvent):void
			{
				if(selectedItem)
				{
					selectedItem.deselect();
					selectedItem = null;
				}
			}
			
			private function child_doubleClickHandler(event:MouseEvent):void
			{
				var myEvent:MyTileGroupEvent = new MyTileGroupEvent(MyTileGroupEvent.CHILD_DOUBLE_CLICK, selectedItem as UIComponent);
				dispatchEvent(myEvent);
			}
			
			
			
			
			
			
			/*
			protected function myTileGroup_rightMouseDownHandler(event:MouseEvent):void
			{
				if(selectedItem)
				{
					selectedItem.deselect();
					selectedItem = null;
				}
				
				var myEvent:MyTileGroupEvent = new MyTileGroupEvent(MyTileGroupEvent.GROUP_RIGHT_MOUSE_DOWN);
				dispatchEvent(myEvent);
			}
			
			private function childRightMouseDown(event:MouseEvent):void
			{
				childSelect(event);
				
				dispatchEvent(new MyTileGroupEvent(MyTileGroupEvent.CHILD_RIGHT_MOUSE_DOWN));
			}
			*/
			
			protected function myTileGroup_mouseOverHandler(event:MouseEvent):void
			{
				trace("Over Group");
				
				var myEvent:MyTileGroupEvent = new MyTileGroupEvent(MyTileGroupEvent.GROUP_RIGHT_MOUSE_DOWN);
				dispatchEvent(myEvent);
			}
			
			private function childMouseOver(event:MouseEvent):void
			{
				trace("Over Child");
				
				event.stopImmediatePropagation();
				dispatchEvent(new MyTileGroupEvent(MyTileGroupEvent.CHILD_RIGHT_MOUSE_DOWN));
			}
			
		]]>
	</fx:Script>
	
</s:TileGroup>
