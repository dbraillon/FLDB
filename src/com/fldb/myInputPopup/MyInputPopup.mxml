<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="400" height="200"
			   creationComplete="doSelect()"
			   close="doCancel()">

	<s:VGroup height="100%" width="100%"
			  horizontalAlign="center" verticalAlign="middle" gap="0"
			  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
		
		<s:VGroup height="80%" width="100%"
				  horizontalAlign="center" verticalAlign="middle">
			
			<!-- Explanation label -->
			<s:Label text="{myLabelText}" includeInLayout="{myLabelText != ''}" />
			
			<!-- Input -->
			<s:TextInput id="myTextInput" text="@{myInputText}" width="60%" />
			
		</s:VGroup>
		
		<!-- Buttons -->
		<s:HGroup height="20%" width="100%"
				  horizontalAlign="center" verticalAlign="middle">
			
			<s:Button label="OK" click="doValidate()" />
			<s:Button label="Annuler" click="doCancel()" />
			
		</s:HGroup>
		
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			
			
			private var _myLabelText:String;
			private var _myInputText:String;
			
			/* Select the content of myTextInput and set the focus in it */
			protected function doSelect():void
			{
				myTextInput.selectAll();
				myTextInput.setFocus();
			}
			
			/* Dispatch an event with the result and close the popup */
			protected function doValidate():void
			{
				var myEvent:MyInputPopupEvent = new MyInputPopupEvent(MyInputPopupEvent.RESULT, myInputText);
				
				doClose(myEvent);
			}
			
			/* Dispatch a cancel event and close the popup */
			protected function doCancel():void
			{
				var myEvent:MyInputPopupEvent = new MyInputPopupEvent(MyInputPopupEvent.CANCEL, myInputText);
				
				doClose(myEvent);
			}
			
			/* Close this Popup */
			protected function doClose(myEvent:MyInputPopupEvent):void
			{
				dispatchEvent(myEvent);
				
				PopUpManager.removePopUp(this);
			}

			
			[Bindable]
			public function get myLabelText():String
			{
				if(!_myLabelText)
				{
					_myLabelText = "";
				}
				
				return _myLabelText;
			}

			[Inspectable]
			public function set myLabelText(value:String):void
			{
				_myLabelText = value;
			}

			[Bindable]
			public function get myInputText():String
			{
				if(!_myInputText)
				{
					_myInputText = "";
				}
				
				return _myInputText;
			}

			[Inspectable]
			public function set myInputText(value:String):void
			{
				_myInputText = value;
			}
			
		]]>
	</fx:Script>

</s:TitleWindow>
